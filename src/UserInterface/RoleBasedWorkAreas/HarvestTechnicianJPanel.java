/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RoleBasedWorkAreas;

import Business.LoginPerson.LoginPerson;
import Business.Models.Crop;
import Business.Models.CropScheduleTechniqueRelation;
import Business.Roles.CropPlanner;
import Business.Roles.DataAnalyst;
import Business.Roles.HarvestTechnician;
import UserInterface.RoleBasedWorkAreas.CropPlannerPanels.CPAnalyseForecastDemandJPanel;
import static UserInterface.RoleBasedWorkAreas.DataAnalystJPanel.cropPlannerList;
import UserInterface.RoleBasedWorkAreas.HarvestTechnicianPanels.CropsHarvestPlanJPanel;
import static Utils.HistoricalData.seasonBasedData;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JPanel;

/**
 *
 * @author yash
 */
public class HarvestTechnicianJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HarvestTechnicianJPanel
     */
    JPanel MainJPanel;
    HashMap<CropPlanner,HashMap<Crop, List<CropScheduleTechniqueRelation>>> cropPlannerScheduleList;
    List<HarvestTechnician> harvestTechnicianList = new ArrayList<>();
    LoginPerson person;
    HarvestTechnician loggedInHarvestTechnician;
    public HarvestTechnicianJPanel(LoginPerson person,List<HarvestTechnician> harvestTechnicianList, JPanel MainJPanel) {
        initComponents();
        this.MainJPanel = MainJPanel;
        this.harvestTechnicianList = harvestTechnicianList;
        this.person = person;
        this.loggedInHarvestTechnician = getHarvestTechnicianObject();

        cropPlannerScheduleList = new HashMap<CropPlanner,HashMap<Crop, List<CropScheduleTechniqueRelation>>>();
        cropPlannerScheduleList = DataAnalystJPanel.cropPlannerList;
        
//        loadDropDownValues();
        this.MainJPanel = MainJPanel;
        
        loadDropDownValues();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cropsListLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cropsListTable = new javax.swing.JTable();
        plannerComboBox = new javax.swing.JComboBox<>();
        comboBoxLbl = new javax.swing.JLabel();
        logOutBtn = new javax.swing.JButton();
        finalisePlanBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);

        cropsListLbl.setBackground(new java.awt.Color(255, 255, 255));
        cropsListLbl.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        cropsListLbl.setText("List of Crops to be harvested");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        cropsListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Crop", "Technique", "Schedule", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cropsListTable);

        plannerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plannerComboBoxActionPerformed(evt);
            }
        });

        comboBoxLbl.setBackground(new java.awt.Color(255, 255, 255));
        comboBoxLbl.setText("Select Crop Planner");

        logOutBtn.setText("Log Out");
        logOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBtnActionPerformed(evt);
            }
        });

        finalisePlanBtn.setText("Finalise plan");
        finalisePlanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalisePlanBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxLbl)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logOutBtn)
                            .addComponent(plannerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(cropsListLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(finalisePlanBtn)
                .addGap(282, 282, 282))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(cropsListLbl)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(comboBoxLbl)
                        .addGap(35, 35, 35)
                        .addComponent(plannerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(logOutBtn)))
                .addGap(29, 29, 29)
                .addComponent(finalisePlanBtn)
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void plannerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plannerComboBoxActionPerformed
        // TODO add your handling code here:
        populateCropTable();
    }//GEN-LAST:event_plannerComboBoxActionPerformed

    private void logOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutBtnActionPerformed
        // TODO add your handling code here:
    MainJPanel.remove(this);
    CardLayout layout = (CardLayout) MainJPanel.getLayout();
    layout.previous(MainJPanel);
    }//GEN-LAST:event_logOutBtnActionPerformed

    public HarvestTechnician getHarvestTechnicianObject(){
        for (HarvestTechnician harvestTech : harvestTechnicianList) {
            if(harvestTech.getUserName().equalsIgnoreCase(person.getUserName())){
                return harvestTech;
            }
        }
        return null;
    }
    private void finalisePlanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalisePlanBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) cropsListTable.getModel();

        int row = cropsListTable.getSelectedRow();
        if(row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
         }

        ArrayList<String> selectedRowData = new ArrayList();
        
        // Get data from all elements in the selected row
        for (int col = 0; col < model.getColumnCount(); col++) {
            selectedRowData.add(String.valueOf(model.getValueAt(row, col)));
        }
        
        // Get the crop planner name from combo box
        String selectedCropPlanner = (String) plannerComboBox.getSelectedItem();
        
        
        CropsHarvestPlanJPanel cropPanel = new CropsHarvestPlanJPanel(MainJPanel,selectedRowData, selectedCropPlanner);
        MainJPanel.add("cropPanel", cropPanel);

        CardLayout layout = (CardLayout) MainJPanel.getLayout();
        layout.next(MainJPanel);
    }//GEN-LAST:event_finalisePlanBtnActionPerformed

    public void loadDropDownValues() {


       for (CropPlanner planner : cropPlannerList.keySet()) {
            String plannerName = planner.getName();
            plannerComboBox.addItem(plannerName);
        }
       plannerComboBox.setSelectedIndex(0);

    }
    
    public void populateCropTable(){
        // Loop through each crop planner
     String plannerName = (String) plannerComboBox.getSelectedItem();

     DefaultTableModel model = (DefaultTableModel) cropsListTable.getModel();
     model.setRowCount(0);

        // Loop through each crop planner
        for (CropPlanner planner : cropPlannerScheduleList.keySet()) {
            if (planner.getName().equals(plannerName)) {

               // Loop through each crop for the current planner
                for (Crop crop : cropPlannerScheduleList.get(planner).keySet()) {
                    // Loop through each relation for the current crop
                     for (CropScheduleTechniqueRelation relation : cropPlannerScheduleList.get(planner).get(crop)) {

                        // Add data to the table
                        Object[] row = new Object[4];
                        row[0] = crop.getName();
                        row[1] = relation.getTechnique();
                        row[2] = relation.getCropSchedule().getDayNTime(); 
                        row[3] = relation.getHarvestTechnicianStatus();


                        model.addRow(row);
                    }
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel comboBoxLbl;
    private javax.swing.JLabel cropsListLbl;
    private javax.swing.JTable cropsListTable;
    private javax.swing.JButton finalisePlanBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutBtn;
    private javax.swing.JComboBox<String> plannerComboBox;
    // End of variables declaration//GEN-END:variables
}
